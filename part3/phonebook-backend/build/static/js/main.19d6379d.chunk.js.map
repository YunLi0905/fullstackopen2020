{"version":3,"sources":["components/person.js","components/persons.js","components/filter.js","components/personForm.js","components/notification.js","services/personService.js","App.js","serviceWorker.js","index.js"],"names":["Person","person","handleClick","name","number","onClick","Persons","props","persons","filter","toLowerCase","includes","searchTerm","map","key","id","Filter","value","onChange","handleSearch","PersonForm","console","log","onSubmit","addPerson","newName","handleNameChange","newNumber","handleNumberChange","type","Notification","result","message","className","baseUrl","request","axios","get","then","res","data","catch","error","newPerson","post","response","Error","put","delete","App","useState","setPersons","setNewPerson","setNewName","setNewNumber","setSearchTerm","setResult","setMessage","useEffect","personService","initialPersons","event","preventDefault","target","length","find","p","window","confirm","personObject","returnedPerson","concat","setTimeout","personInDb","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.19d6379d.chunk.js","sourcesContent":["import React from \"react\"\n\nconst Person = ({ person, handleClick }) => {\n  return (\n    <p>\n      {person.name} {person.number}\n      {\"  \"}\n      <button onClick={handleClick}>Delete</button>\n    </p>\n  )\n}\n\nexport default Person\n","import React from \"react\"\nimport Person from \"./person\"\n\nconst Persons = props => {\n  return (\n    <ul>\n      {props.persons\n        .filter(person => person.name.toLowerCase().includes(props.searchTerm))\n        .map(person => (\n          <Person\n            key={person.id}\n            person={person}\n            handleClick={() => props.handleClick(person.id)}\n          />\n        ))}\n    </ul>\n  )\n}\n\nexport default Persons\n","import React from \"react\"\n\nconst Filter = props => {\n  return (\n    <form>\n      <div>\n        filter shown with:\n        <input value={props.searchTerm} onChange={props.handleSearch} />\n      </div>\n    </form>\n  )\n}\n\nexport default Filter\n","import React from \"react\"\n\nconst PersonForm = props => {\n  console.log(props)\n  return (\n    <form onSubmit={props.addPerson}>\n      <div>\n        name: {\"     \"}\n        <input value={props.newName} onChange={props.handleNameChange} />\n      </div>\n      <div>\n        number:{\" \"}\n        <input value={props.newNumber} onChange={props.handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nexport default PersonForm\n","import React from \"react\"\n\nconst Notification = ({ result, message }) => {\n  console.log(\"success?\", result)\n  console.log(\"message: \", message)\n  if (result) {\n    return <div className=\"added\">{message}</div>\n  } else if (result === false) {\n    return <div className=\"error\">{message}</div>\n  }\n  return null\n}\n\nexport default Notification\n","import axios from \"axios\"\n\nconst baseUrl = \"/api/persons\"\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  console.log(\"request\", request)\n  return request\n    .then(res => res.data)\n    .catch(error => {\n      console.log(\"fail\", error)\n    })\n}\n\nconst getOne = id => {\n  const request = axios.get(`${baseUrl}/${id}`)\n  console.log(\"request\", request)\n  return request\n    .then(res => res.data)\n    .catch(error => {\n      console.log(\"fail\", error)\n    })\n}\n\nconst createPerson = newPerson => {\n  const request = axios.post(baseUrl, newPerson)\n  return request\n    .then(res => res.data)\n    .catch(error => {\n      console.log(error.response.data.error)\n      throw Error(error.response.data.error)\n    })\n}\n\nconst updatePerson = (id, newPerson) => {\n  const request = axios.put(`${baseUrl}/${id}`, newPerson)\n  return request.then(res => res.data)\n}\n\nconst deletePerson = (id, person) => {\n  const request = axios.delete(`${baseUrl}/${id}`, person)\n  return request.then(res => res.data)\n}\n\nexport default {\n  getAll,\n  getOne,\n  createPerson,\n  updatePerson,\n  deletePerson\n}\n","import React, { useState, useEffect } from \"react\"\nimport Persons from \"./components/persons\"\nimport Filter from \"./components/filter\"\nimport PersonForm from \"./components/personForm\"\nimport Notification from \"./components/notification\"\n\nimport personService from \"./services/personService\"\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newPerson, setNewPerson] = useState([])\n  const [newName, setNewName] = useState(\"\")\n  const [newNumber, setNewNumber] = useState(\"\")\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [result, setResult] = useState(\"\")\n  const [message, setMessage] = useState(\"\")\n\n  useEffect(() => {\n    console.log(\"initialPersons\")\n    personService.getAll().then(initialPersons => {\n      setPersons(initialPersons)\n    })\n  }, [])\n  console.log(persons)\n\n  const handleNameChange = event => {\n    event.preventDefault()\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = event => {\n    event.preventDefault()\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const addPerson = event => {\n    event.preventDefault()\n\n    if (persons.filter(person => person.name === newName).length > 0) {\n      const person = persons.find(p => p.name === newName)\n      console.log(\"person: \", person)\n      const resultConfirmed = window.confirm(\n        newName +\n          \" is already added to phonebook,replace the old number with a new one?\"\n      )\n\n      if (resultConfirmed) {\n        const personObject = {\n          name: newName,\n          number: newNumber\n        }\n        setNewPerson(personObject)\n        personService.updatePerson(person.id, personObject)\n\n        setPersons(\n          persons.map(p => {\n            if (p.id !== person.id) {\n              return p\n            }\n            return { ...p, number: newNumber }\n          })\n        )\n      }\n      setNewName(\"\")\n      setNewNumber(\"\")\n    } else {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      setNewPerson(personObject)\n\n      personService\n        .createPerson(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName(\"\")\n          setNewNumber(\"\")\n          setResult(true)\n          setMessage(\"Added \" + personObject.name)\n        })\n        .catch(error => {\n          setMessage(error.message)\n\n          setResult(false)\n        })\n    }\n    setTimeout(() => {\n      setMessage(\"\")\n      setResult(\"\")\n      setNewPerson(\"\")\n    }, 2000)\n  }\n\n  const handleDeletePerson = id => {\n    console.log(\"handleDeletePerson called with id =\", id)\n    const person = persons.find(p => p.id === id)\n    personService.getOne(id).then(personInDb => {\n      if (!personInDb) {\n        setPersons(persons.filter(p => p.id !== id))\n        setResult(false)\n        setMessage(\n          \"Information of \" +\n            person.name +\n            \" has already been removed from server\"\n        )\n        setTimeout(() => {\n          setResult(\"\")\n          setMessage(\"\")\n        }, 2000)\n      } else {\n        const resultConfirmed = window.confirm(`Delete ${person.name}?`)\n        if (resultConfirmed) {\n          personService.deletePerson(id, person)\n          setPersons(persons.filter(p => p.id !== id))\n          setResult(true)\n          setMessage(person.name + \" has been removed successfully \")\n          setTimeout(() => {\n            setResult(\"\")\n            setMessage(\" \")\n          }, 2000)\n        }\n      }\n    })\n  }\n\n  const handleSearch = event => {\n    event.preventDefault()\n    setSearchTerm(event.target.value)\n  }\n\n  console.log(\"new person\", newPerson)\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification result={result} message={message} />\n      <Filter searchTerm={searchTerm} handleSearch={handleSearch} />\n      <h2>add a new</h2>\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons\n        persons={persons}\n        searchTerm={searchTerm}\n        handleClick={handleDeletePerson}\n      />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}